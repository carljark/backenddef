(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{93:function(t,e,i){"use strict";i.r(e);var s=i(87),r=i(88),n=i(89),a=i(0),o=i(54),h=i(21),c=i(91),l=i(1),u=i(38),d=i(39),p=i(16);function m(t,e,i){return void 0===i&&(i=Number.POSITIVE_INFINITY),"function"==typeof e?function(s){return s.pipe(m(function(i,s){return Object(o.a)(t(i,s)).pipe(Object(h.a)(function(t,r){return e(i,t,s,r)}))},i))}:("number"==typeof e&&(i=e),function(e){return e.lift(new f(t,i))})}var f=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new v(t,this.project,this.concurrent))},t}(),v=function(t){function e(e,i,s){void 0===s&&(s=Number.POSITIVE_INFINITY);var r=t.call(this,e)||this;return r.project=i,r.concurrent=s,r.hasCompleted=!1,r.buffer=[],r.active=0,r.index=0,r}return l.a(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,i=this.index++;try{e=this.project(t,i)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,i)},e.prototype._innerSub=function(t,e,i){var s=new p.a(this,void 0,void 0);this.destination.add(s),Object(u.a)(this,t,e,i,s)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,i,s,r){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(d.a),y=i(90),x=function(t){function e(e,i){var s=t.call(this,e,i)||this;return s.scheduler=e,s.work=i,s.pending=!1,s}return l.a(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var i=this.id,s=this.scheduler;return null!=i&&(this.id=this.recycleAsyncId(s,i,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(s,this.id,e),this},e.prototype.requestAsyncId=function(t,e,i){return void 0===i&&(i=0),setInterval(t.flush.bind(t,this),i)},e.prototype.recycleAsyncId=function(t,e,i){if(void 0===i&&(i=0),null!==i&&this.delay===i&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var i=this._execute(t,e);if(i)return i;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var i=!1,s=void 0;try{this.work(t)}catch(t){i=!0,s=!!t&&t||new Error(t)}if(i)return this.unsubscribe(),s},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,i=e.actions,s=i.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==s&&i.splice(s,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,i){return t.call(this)||this}return l.a(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(i(3).a)),g=function(){function t(e,i){void 0===i&&(i=t.now),this.SchedulerAction=e,this.now=i}return t.prototype.schedule=function(t,e,i){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(i,e)},t.now=function(){return Date.now()},t}(),w=new(function(t){function e(i,s){void 0===s&&(s=g.now);var r=t.call(this,i,function(){return e.delegate&&e.delegate!==r?e.delegate.now():s()})||this;return r.actions=[],r.active=!1,r.scheduled=void 0,r}return l.a(e,t),e.prototype.schedule=function(i,s,r){return void 0===s&&(s=0),e.delegate&&e.delegate!==this?e.delegate.schedule(i,s,r):t.prototype.schedule.call(this,i,s,r)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var i;this.active=!0;do{if(i=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,i){for(;t=e.shift();)t.unsubscribe();throw i}}},e}(g))(x);var b,S=i(2),T=i(40);function A(t){var e=t.error;t.subscriber.error(e)}b||(b={});var P=function(){function t(t,e,i){this.kind=t,this.value=e,this.error=i,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,i){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return i&&i()}},t.prototype.accept=function(t,e,i){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,i)},t.prototype.toObservable=function(){var t,e;switch(this.kind){case"N":return Object(n.a)(this.value);case"E":return t=this.error,e?new a.a(function(i){return e.schedule(A,0,{error:t,subscriber:i})}):new a.a(function(e){return e.error(t)});case"C":return Object(T.a)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();function D(t,e){void 0===e&&(e=w);var i,s=(i=t)instanceof Date&&!isNaN(+i)?+t-e.now():Math.abs(t);return function(t){return t.lift(new N(s,e))}}var N=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new I(t,this.delay,this.scheduler))},t}(),I=function(t){function e(e,i,s){var r=t.call(this,e)||this;return r.delay=i,r.scheduler=s,r.queue=[],r.active=!1,r.errored=!1,r}return l.a(e,t),e.dispatch=function(t){for(var e=t.source,i=e.queue,s=t.scheduler,r=t.destination;i.length>0&&i[0].time-s.now()<=0;)i.shift().notification.observe(r);if(i.length>0){var n=Math.max(0,i[0].time-s.now());this.schedule(t,n)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,i=new k(e.now()+this.delay,t);this.queue.push(i),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(P.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(P.createComplete()),this.unsubscribe()},e}(S.a),k=function(){return function(t,e){this.time=t,this.notification=e}}();function E(t,e){return m(t,e,1)}var L=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new M(t,this.selector,this.caught))},t}(),M=function(t){function e(e,i,s){var r=t.call(this,e)||this;return r.selector=i,r.caught=s,r}return l.a(e,t),e.prototype.error=function(e){if(!this.isStopped){var i=void 0;try{i=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var s=new p.a(this,void 0,void 0);this.add(s),Object(u.a)(this,i,void 0,void 0,s)}},e}(d.a);var O={date:"%d.%m.%Y",dateTime:"%a %b %e %X %Y",days:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],periods:["AM","PM"],shortDays:["Do","Lu","Ma","Mi","Ju","Vi","Sa"],shortMonths:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],time:"%H:%M:%S"},_=i(13);const H=new(i(92).a),$=t=>{t.matches&&(console.log(t),H.next(t.media))},j=window.matchMedia("(max-width: 1024px)"),C=window.matchMedia("(max-width: 568px)"),V=window.matchMedia("(max-width: 320px)"),G=window.matchMedia("(min-width: 321px)");j.addListener($),C.addListener($),V.addListener($),G.addListener($);var z=H;i.d(e,"GraphLineComponent",function(){return F}),s.timeFormatDefaultLocale(O);class F{constructor(t,e){this.lineas=t,this.socketioServ=e,this.formatEverd=s.timeFormat("%d/%m %H:%M"),this.d={price:0,timestamp:new Date},this.bisectDate=s.bisector(t=>t.timestamp).right,this.bisectValue=s.bisector(t=>t.price).right,this.svgWidth=800,this.svgHeight=300,this.margin={top:30,right:40,bottom:70,left:100},this.width=this.svgWidth-this.margin.left-this.margin.right,this.height=this.svgHeight-this.margin.top-this.margin.bottom,this.originalCircle={cx:-150,cy:-15,r:20},this.chartProps={},this.titleGraph="",this.mediaString="(min-width: 321px)",this.ngOnInit(),z.subscribe(t=>{this.mediaString=t,console.log("detectado cambio de ancho",t),this.recalculateWidths(t)}),this.linesDataUpdated$=this.socketioServ.getUpdatedCurrencies$(),this.linesDataUpdated$.pipe(Object(h.a)(t=>{const e=t.findIndex(t=>t.name===this.titleGraph);return t[e]})).subscribe(t=>{console.log("currData updated: ",t),this.line1DataHistory.timePriceArray.shift(),this.lineas[0]=this.line1DataHistory,this.line1DataHistory.timePriceArray.push({price:t.price,timestamp:new Date}),this.updateAxis(),this.recalculateWidths(this.mediaString)})}static removeSvg$(t){return Object(n.a)(s.select(`#${t}`).remove()).pipe(Object(c.a)(!0))}updateAxis(){this.chartProps.xScale.domain(s.extent(this.line1DataHistory.timePriceArray,t=>new Date(t.timestamp).getTime())),this.chartProps.yScale.domain([0,s.max(this.lineas,t=>1.1*Math.max(...t.timePriceArray.map(t=>t.price)))]),this.lineSvg.attr("d",this.originalLine.bind(this)(this.line1DataHistory.timePriceArray)),this.d3eventtransform&&1!==this.d3eventtransform.k?(console.log("d3eventTransform: ",this.d3eventtransform),this.lineSvg.attr("d",this.scaledLine.bind(this)(this.line1DataHistory.timePriceArray)),this.svgViewport.call(this.zoom.bind(this))):this.d3eventtransform&&1===this.d3eventtransform.k&&(this.lineSvg.attr("d",this.originalLine.bind(this)(this.line1DataHistory.timePriceArray)),this.d3eventtransform=void 0,this.newxScale=void 0)}onclickremove(){document.getElementById(`${this.titleGraph}data`).className="fila",F.removeSvg$(this.titleGraph)}getLine1(){return new a.a(t=>{this.line1DataHistory=this.lineas[0],t.next(this.lineas[0])})}getTitles(){return new a.a(t=>{let e="";this.lineas.forEach(t=>{t.name&&(e=""===e?t.name:e+" / "+t.name)}),this.titleGraph=e,t.next(e)})}putToolTipInLastPoint(){return new a.a(t=>{const e=this.line1DataHistory.timePriceArray.length-1;this.d=this.line1DataHistory.timePriceArray[e],this.moveToolTip(),t.next(!0)})}ngOnInit(){var t;this.getTitles().pipe(m(()=>this.getLine1()),Object(y.a)(()=>this.defineChart$()),Object(y.a)(()=>Object(o.a)(this.lineas)),m(t=>this.drawLine$(t)),D(1e3),E(()=>this.addToolTips$()),E(()=>this.addEventsArea()),Object(y.a)(()=>this.putToolTipInLastPoint()),(t=(()=>Object(n.a)("error")),function(e){var i=new L(t),s=e.lift(i);return i.caught=s})).subscribe(()=>{this.addTitleGraph()})}defineChart$(){return new a.a(t=>{this.defineChart(),t.next(!0)})}defineChart(){this.lineGraphElement=document.getElementById("linechart"),this.svgViewport=s.select(this.lineGraphElement).append("svg").attr("id",this.titleGraph).style("background","white").attr("viewBox",`0 0 ${this.svgWidth} ${this.svgHeight}`),this.chartProps.xScale=s.scaleTime().domain(s.extent(this.line1DataHistory.timePriceArray,t=>new Date(t.timestamp).getTime())).range([0,this.width]).clamp(!0),this.svgViewport.on("mousedown.zoom",null).on("touchstart.zoom",null).on("touchmove.zoom",null).on("touchend.zoom",null),this.chartProps.yScale=s.scaleLinear().domain([0,s.max(this.lineas,t=>1.1*Math.max(...t.timePriceArray.map(t=>t.price)))]).range([this.height,0]).clamp(!0),this.xAxis=s.axisBottom(this.chartProps.xScale),this.yAxis=s.axisLeft(this.chartProps.yScale),this.zoom=s.zoom().scaleExtent([1,1/0]).translateExtent([[0,0],[this.width,this.height]]).extent([[0,0],[this.width,this.height]]).on("zoom",this.zoomFunction.bind(this)),this.innerSpace=this.svgViewport.append("g").attr("class","inner_space").attr("transform","translate("+this.margin.left+","+this.margin.top+")").call(this.zoom.bind(this));const t=window.innerWidth/200;console.log("numberOfTics",t),this.gX=this.innerSpace.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+this.height+")").call(this.xAxis.ticks(Math.max(t,2)).tickFormat(this.formatEverd)),this.gY=this.innerSpace.append("g").attr("class","axis axis--y").call(this.yAxis.ticks(Math.max(t,4))),this.originalLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.chartProps.xScale(t.timestamp.getTime())}).y(t=>this.chartProps.yScale(t.price)),this.scaledLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.newxScale(t.timestamp.getTime())}).y(t=>this.newyScale(t.price));this.svgViewport.append("rect").attr("x",5).attr("y",5).attr("width",30).attr("height",30).attr("fill","red").on("click",this.onclickremove.bind(this)),this.svgViewport.append("line").attr("class","aspas").attr("x1",35).attr("x2",5).attr("y1",5).attr("y2",35).attr("pointer-events","none"),this.svgViewport.append("line").attr("class","aspas").attr("x1",5).attr("x2",35).attr("y1",5).attr("y2",35).attr("pointer-events","none")}addEventsArea(){return new a.a(t=>{this.view=this.innerSpace.append("rect").attr("class","zoom").attr("width",this.width).attr("height",this.height).on("mouseover",this.mouseover.bind(this)).on("mousemove",this.mousemove.bind(this)).on("touchstart",this.touchStart.bind(this)).on("touchmove",this.touchMove.bind(this)).on("touchend",()=>{this.focus.style("display",null)}),t.next(!0)})}drawLine$(t){return new a.a(e=>{this.drawLine(t),e.next(t)})}drawLine(t){t.timePriceArray.forEach(t=>{t.timestamp=r(t.timestamp).toDate()}),this.lineSvg=this.innerSpace.append("path").datum(t.timePriceArray).attr("class","linegraph").style("stroke","black").attr("d",this.originalLine.bind(this)(t.timePriceArray))}reescaleGraphic(){this.newxScale=this.d3eventtransform.rescaleX(this.chartProps.xScale),this.newyScale=this.d3eventtransform.rescaleY(this.chartProps.yScale),this.gX.call(this.xAxis.scale(this.newxScale)),this.gY.call(this.yAxis.scale(this.newyScale)),this.lineSvg.call(this.xAxis.scale(this.newxScale)),this.lineSvg.call(this.yAxis.scale(this.newyScale)),this.changeLine(),this.moveToolTip()}zoomFunction(){this.d3eventtransform=s.event.transform,this.reescaleGraphic()}changeLine(){this.lineSvg.attr("d",this.scaledLine.bind(this))}addTitleGraph(){this.titleSvg=this.innerSpace.append("text").attr("x",this.margin.left).attr("y",260).attr("class","graphic_title_text").attr("text-anchor","start").text(this.titleGraph)}addToolTips$(){return new a.a(t=>{this.addToolTips(),t.next(!0)})}addToolTips(){this.focus=this.innerSpace.append("g").attr("class","this.focus").style("display","null"),this.focus.append("line").attr("class","x-hover-line hover-line").attr("y1",0).attr("y2",this.height).attr("pointer-events","none"),this.focus.append("line").attr("class","y-hover-line hover-line").attr("x1",0).attr("x2",this.width).attr("pointer-events","none"),this.focus.append("circle").attr("r",2).attr("pointer-events","none"),this.textToolTip=this.focus.append("text").attr("id","textToolTip").attr("class","text_tooltip").attr("text-anchor","end").attr("y",-20).attr("dy",".31em")}getDataPoint(){if(this.d){return`${r(this.d.timestamp).format(_.a.tooltipTimeFormat)}: ${(Math.round(100*this.d.price)/100).toLocaleString("es-ES",{currency:"EUR",style:"currency"})}`}return"no data"}touchMove(t,e,i){s.event.preventDefault(),s.event.stopPropagation();s.touches(i[e]);this.focus.style("display",null),this.mousemove(t,e,i)}touchStart(t,e,i){s.event.preventDefault(),s.event.stopPropagation();s.touches(i[e]);this.focus.style("display",null),this.mousemove(t,e,i)}mouseover(t,e,i){s.event.preventDefault(),s.event.stopPropagation(),this.focus.style("display",null),this.mousemove(t,e,i)}mousemove(t,e,i){let r;s.event.preventDefault(),s.event.stopPropagation(),r=this.newxScale?this.newxScale.invert(s.mouse(i[e])[0]):this.chartProps.xScale.invert(s.mouse(i[e])[0]);const n=this.bisectDate(this.line1DataHistory.timePriceArray,r,1),a=this.line1DataHistory.timePriceArray[n-1],o=this.line1DataHistory.timePriceArray.length;let h;h=n>=this.line1DataHistory.timePriceArray.length?this.line1DataHistory.timePriceArray[o-1]:this.line1DataHistory.timePriceArray[n],this.d=r.getTime()-a.timestamp.getTime()>h.timestamp.getTime()-r.getTime()?h:a,this.moveToolTip()}moveToolTip(){this.newxScale?(this.focus.attr("transform",`translate(${this.newxScale(new Date(this.d.timestamp))},${this.newyScale(this.d.price)})`),this.distanciax=this.newxScale(new Date(this.d.timestamp))):(this.focus.attr("transform",`translate(${this.chartProps.xScale(new Date(this.d.timestamp))},${this.chartProps.yScale(this.d.price)})`),this.distanciax=this.chartProps.xScale(new Date(this.d.timestamp))),this.textToolTip.text(this.getDataPoint.bind(this)),this.focus.selectAll("rect").remove(),this.calculateBbox();this.focus.append("rect").attr("x",this.bbox.x).attr("y",this.bbox.y).attr("width",this.bbox.width).attr("height",this.bbox.height).style("fill","white").style("fill-opacity",".9").style("stroke","#666").style("stroke-width","0.5px");this.txtNode=this.textToolTip.node(),this.focus.node().insertBefore(this.txtNode,null);let t=0;t=this.newyScale?this.newyScale(this.d.price):this.chartProps.yScale(this.d.price),this.focus.select(".x-hover-line").attr("y2",this.height-t),this.focus.select(".y-hover-line").attr("x2",-this.distanciax)}recalculateWidths(t){const e=parseInt(t.slice(12,16),10);console.log("widthToNumber: ",e);const i=e/100;console.log("numberOfTics: ",i),this.gX.call(this.xAxis.ticks(Math.max(i,2)).tickFormat(this.formatEverd)),this.gY.call(this.yAxis.ticks(4)),this.moveToolTip()}calculateBbox(){return this.txtNode=this.textToolTip.node(),this.bbox=this.txtNode.getBBox(),this.bbox.width+10>this.distanciax?(this.textToolTip.attr("text-anchor","start"),this.bbox=this.txtNode.getBBox()):this.textToolTip.attr("text-anchor","end"),this.bbox}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,