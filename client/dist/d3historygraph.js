(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{88:function(t,e,i){"use strict";i.r(e);var s=i(52),a=i(53),r=i(55),h=i(79),n=i(81),c=i(80),l=i(84),o=i(87),m=i(85),p=i(86);var d={date:"%d.%m.%Y",dateTime:"%a %b %e %X %Y",days:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],periods:["AM","PM"],shortDays:["Do","Lu","Ma","Mi","Ju","Vi","Sa"],shortMonths:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],time:"%H:%M:%S"};i.d(e,"GraphLineComponent",function(){return g}),s.timeFormatDefaultLocale(d);class g{constructor(t){this.lineas=t,this.bisectDate=s.bisector(t=>t.timestamp).right,this.bisectValue=s.bisector(t=>t.price).right,this.svgWidth=800,this.svgHeight=300,this.margin={top:30,right:40,bottom:50,left:60},this.width=this.svgWidth-this.margin.left-this.margin.right,this.height=this.svgHeight-this.margin.top-this.margin.bottom,this.originalCircle={cx:-150,cy:-15,r:20},this.chartProps={},this.lineGraphElement=document.getElementById("linechart"),this.titleGraph="",this.ngOnInit()}getLine1(){return new r.a(t=>{this.linea1=this.lineas[0],t.next(this.lineas[0])})}getTitles(){return new r.a(t=>{let e="";this.lineas.forEach(t=>{t.name&&(e=""===e?t.name:e+" / "+t.name)}),this.titleGraph=e,t.next(e)})}ngOnInit(){this.getTitles().pipe(Object(c.a)(t=>this.getLine1()),Object(l.a)(t=>this.defineChart$()),Object(l.a)(t=>Object(h.a)(this.lineas)),Object(c.a)(t=>this.drawLine$(t)),Object(o.a)(1e3),Object(m.a)(t=>this.addToolTips$(t)),Object(m.a)(t=>this.addEventsArea()),Object(p.a)(()=>Object(n.a)("error"))).subscribe(t=>{this.addTitleGraph()})}deleteSvg(){s.select(this.lineGraphElement).remove()}defineChart$(){return new r.a(t=>{this.defineChart(),t.next(!0)})}defineChart(){this.svgViewport=s.select(this.lineGraphElement).append("svg").style("background","white").attr("viewBox",`0 0 ${this.svgWidth} ${this.svgHeight}`),this.chartProps.xScale=s.scaleTime().domain(s.extent(this.linea1.timePriceArray,t=>new Date(t.timestamp).getTime())).range([0,this.width]).clamp(!0),this.chartProps.yScale=s.scaleLinear().domain([0,s.max(this.lineas,t=>1.1*Math.max(...t.timePriceArray.map(t=>t.price)))]).range([this.height,0]).clamp(!0),this.xAxis=s.axisBottom(this.chartProps.xScale),this.yAxis=s.axisLeft(this.chartProps.yScale),this.zoom=s.zoom().scaleExtent([1,1/0]).translateExtent([[0,0],[this.width,this.height]]).extent([[0,0],[this.width,this.height]]).on("zoom",this.zoomFunction.bind(this)),this.innerSpace=this.svgViewport.append("g").attr("class","inner_space").attr("transform","translate("+this.margin.left+","+this.margin.top+")").call(this.zoom.bind(this));const t=s.timeFormat("%d/%m %H:%M");this.gX=this.innerSpace.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+this.height+")").call(this.xAxis.ticks(6).tickFormat(t)),this.gY=this.innerSpace.append("g").attr("class","axis axis--y").call(this.yAxis),this.valueline=s.line().x(t=>{if(t.timestamp instanceof Date)return this.chartProps.xScale(t.timestamp.getTime())}).y(t=>this.chartProps.yScale(t.price))}addEventsArea(){return new r.a(t=>{this.view=this.innerSpace.append("rect").attr("class","zoom").attr("width",this.width).attr("height",this.height).on("mouseover",()=>{this.focus.style("display",null)}).on("mouseout",()=>{this.focus.style("display","none")}).on("mousemove",this.mousemove.bind(this)),t.next(!0)})}drawLine$(t){return new r.a(e=>{this.drawLine(t),e.next(t)})}drawLine(t){t.timePriceArray.forEach(t=>{t.timestamp=a(t.timestamp).toDate()}),this.lineSvg=this.innerSpace.append("path").datum(t.timePriceArray).attr("class","linegraph").style("stroke","black").attr("d",this.valueline.bind(this)(t.timePriceArray))}zoomFunction(){this.newxScale=s.event.transform.rescaleX(this.chartProps.xScale),this.newyScale=s.event.transform.rescaleY(this.chartProps.yScale),this.gX.call(this.xAxis.scale(this.newxScale)),this.gY.call(this.yAxis.scale(this.newyScale)),this.lineSvg.call(this.xAxis.scale(this.newxScale)),this.lineSvg.call(this.yAxis.scale(this.newyScale)),this.d3eventtransform=s.event.transform,console.log("se escala"),this.lineSvg.attr("d",s.line().x(t=>{if(t.timestamp instanceof Date)return this.newxScale(t.timestamp.getTime())}).y(t=>this.newyScale(t.price)))}addTitleGraph(){this.titleSvg=this.innerSpace.append("text").attr("x",this.margin.left).attr("y",260).attr("class","graphic_title_text").attr("text-anchor","left").text(this.titleGraph)}addToolTips$(t){return new r.a(e=>{this.addToolTips(t),e.next(!0)})}addToolTips(t){this.focus=this.innerSpace.append("g").attr("class","this.focus").style("display","none"),this.focus.append("line").attr("class","x-hover-line hover-line").attr("y1",0).attr("y2",this.height).attr("pointer-events","none"),this.focus.append("line").attr("class","y-hover-line hover-line").attr("x1",this.width).attr("x2",this.width).attr("pointer-events","none"),this.focus.append("circle").attr("r",2).attr("pointer-events","none"),this.focus.append("text").attr("x",15).attr("dy",".31em")}mousemove(t,e,i){let r;r=this.newxScale?this.newxScale.invert(s.mouse(i[e])[0]):this.chartProps.xScale.invert(s.mouse(i[e])[0]);const h=this.bisectDate(this.linea1.timePriceArray,r,1),n=this.linea1.timePriceArray[h-1],c=this.linea1.timePriceArray[h],l=r.getTime()-n.timestamp.getTime()>c.timestamp.getTime()-r.getTime()?c:n;this.newxScale?this.focus.attr("transform",`translate(${this.newxScale(new Date(l.timestamp))},${this.newyScale(l.price)})`):this.focus.attr("transform",`translate(${this.chartProps.xScale(new Date(l.timestamp))},${this.chartProps.yScale(l.price)})`);const o=this.focus.select("text").text(()=>`${a(l.timestamp).format("DD/MM HH:mm")}h: ${Math.round(10*l.price)/10}`).node().getBBox();this.focus.selectAll("rect").remove();this.focus.append("rect").attr("x",o.x).attr("y",o.y).attr("width",o.width).attr("height",o.height).style("fill","white").style("fill-opacity",".3").style("stroke","#666").style("stroke-width","1.5px");let m=0;m=this.newyScale?this.newyScale(l.price):this.chartProps.yScale(l.price),this.focus.select(".x-hover-line").attr("y2",this.height-m),this.focus.select(".y-hover-line").attr("x2",this.width+this.width)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,