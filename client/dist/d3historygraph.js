(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{59:function(t,e,i){"use strict";i.r(e);var s=i(57),a=i(58),r=i(87),h=i(61),n=i(85),o=i(90),l=i(86),c=i(91),p=i(94),m=i(92),d=i(93);var g={date:"%d.%m.%Y",dateTime:"%a %b %e %X %Y",days:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],periods:["AM","PM"],shortDays:["Do","Lu","Ma","Mi","Ju","Vi","Sa"],shortMonths:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],time:"%H:%M:%S"},u=i(6);i.d(e,"GraphLineComponent",function(){return x}),s.timeFormatDefaultLocale(g);class x{constructor(t){this.lineas=t,this.d={price:0,timestamp:new Date},this.bisectDate=s.bisector(t=>t.timestamp).right,this.bisectValue=s.bisector(t=>t.price).right,this.svgWidth=800,this.svgHeight=300,this.margin={top:30,right:40,bottom:50,left:60},this.width=this.svgWidth-this.margin.left-this.margin.right,this.height=this.svgHeight-this.margin.top-this.margin.bottom,this.originalCircle={cx:-150,cy:-15,r:20},this.chartProps={},this.titleGraph="",this.ngOnInit()}static removeSvg$(t){return Object(r.a)(s.select(`#${t}`).remove()).pipe(Object(o.a)(!0))}onclickremove(){document.getElementById(`${this.titleGraph}data`).className="fila",x.removeSvg$(this.titleGraph)}getLine1(){return new h.a(t=>{this.linea1=this.lineas[0],t.next(this.lineas[0])})}getTitles(){return new h.a(t=>{let e="";this.lineas.forEach(t=>{t.name&&(e=""===e?t.name:e+" / "+t.name)}),this.titleGraph=e,t.next(e)})}ngOnInit(){this.getTitles().pipe(Object(l.a)(()=>this.getLine1()),Object(c.a)(()=>this.defineChart$()),Object(c.a)(()=>Object(n.a)(this.lineas)),Object(l.a)(t=>this.drawLine$(t)),Object(p.a)(1e3),Object(m.a)(()=>this.addToolTips$()),Object(m.a)(()=>this.addEventsArea()),Object(d.a)(()=>Object(r.a)("error"))).subscribe(()=>{this.addTitleGraph()})}defineChart$(){return new h.a(t=>{this.defineChart(),t.next(!0)})}defineChart(){console.log("titleGraph: ",this.titleGraph),this.lineGraphElement=document.getElementById("linechart"),this.svgViewport=s.select(this.lineGraphElement).append("svg").attr("id",this.titleGraph).style("background","white").attr("viewBox",`0 0 ${this.svgWidth} ${this.svgHeight}`),this.chartProps.xScale=s.scaleTime().domain(s.extent(this.linea1.timePriceArray,t=>new Date(t.timestamp).getTime())).range([0,this.width]).clamp(!0),this.svgViewport.on("mousedown.zoom",null).on("touchstart.zoom",null).on("touchmove.zoom",null).on("touchend.zoom",null),this.chartProps.yScale=s.scaleLinear().domain([0,s.max(this.lineas,t=>1.1*Math.max(...t.timePriceArray.map(t=>t.price)))]).range([this.height,0]).clamp(!0),this.xAxis=s.axisBottom(this.chartProps.xScale),this.yAxis=s.axisLeft(this.chartProps.yScale),this.zoom=s.zoom().scaleExtent([1,1/0]).translateExtent([[0,0],[this.width,this.height]]).extent([[0,0],[this.width,this.height]]).on("zoom",this.zoomFunction.bind(this)),this.innerSpace=this.svgViewport.append("g").attr("class","inner_space").attr("transform","translate("+this.margin.left+","+this.margin.top+")").call(this.zoom.bind(this));const t=s.timeFormat("%d/%m %H:%M");this.gX=this.innerSpace.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+this.height+")").call(this.xAxis.ticks(6).tickFormat(t)),this.gY=this.innerSpace.append("g").attr("class","axis axis--y").call(this.yAxis),this.originalLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.chartProps.xScale(t.timestamp.getTime())}).y(t=>this.chartProps.yScale(t.price)),this.scaledLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.newxScale(t.timestamp.getTime())}).y(t=>this.newyScale(t.price));this.svgViewport.append("rect").attr("x",0).attr("y",0).attr("width",30).attr("height",30).attr("fill","red").on("click",this.onclickremove.bind(this)),this.svgViewport.append("line").attr("class","aspas").attr("x1",30).attr("x2",0).attr("y1",0).attr("y2",30).attr("pointer-events","none"),this.svgViewport.append("line").attr("class","aspas").attr("x1",0).attr("x2",30).attr("y1",0).attr("y2",30).attr("pointer-events","none")}addEventsArea(){return new h.a(t=>{this.view=this.innerSpace.append("rect").attr("class","zoom").attr("width",this.width).attr("height",this.height).on("mouseover",this.mouseover.bind(this)).on("mouseout",()=>{this.focus.style("display","none")}).on("mousemove",this.mousemove.bind(this)).on("touchstart",this.touchStart.bind(this)).on("touchmove",this.touchMove.bind(this)).on("touchend",()=>{this.focus.style("display",null)}),t.next(!0)})}drawLine$(t){return new h.a(e=>{this.drawLine(t),e.next(t)})}drawLine(t){t.timePriceArray.forEach(t=>{t.timestamp=a(t.timestamp).toDate()}),this.lineSvg=this.innerSpace.append("path").datum(t.timePriceArray).attr("class","linegraph").style("stroke","black").attr("d",this.originalLine.bind(this)(t.timePriceArray))}zoomFunction(){this.newxScale=s.event.transform.rescaleX(this.chartProps.xScale),this.newyScale=s.event.transform.rescaleY(this.chartProps.yScale),this.gX.call(this.xAxis.scale(this.newxScale)),this.gY.call(this.yAxis.scale(this.newyScale)),this.lineSvg.call(this.xAxis.scale(this.newxScale)),this.lineSvg.call(this.yAxis.scale(this.newyScale)),this.d3eventtransform=s.event.transform,this.changeLine(),this.moveToolTip()}changeLine(){this.lineSvg.attr("d",this.scaledLine.bind(this))}addTitleGraph(){this.titleSvg=this.innerSpace.append("text").attr("x",this.margin.left).attr("y",260).attr("class","graphic_title_text").attr("text-anchor","start").text(this.titleGraph)}addToolTips$(){return new h.a(t=>{this.addToolTips(),t.next(!0)})}addToolTips(){this.focus=this.innerSpace.append("g").attr("class","this.focus").style("display","none"),this.focus.append("line").attr("class","x-hover-line hover-line").attr("y1",0).attr("y2",this.height).attr("pointer-events","none"),this.focus.append("line").attr("class","y-hover-line hover-line").attr("x1",0).attr("x2",this.width).attr("pointer-events","none"),this.focus.append("circle").attr("r",2).attr("pointer-events","none"),this.textToolTip=this.focus.append("text").attr("id","textToolTip").attr("class","text_tooltip").attr("text-anchor","end").attr("y",-20).attr("dy",".31em")}getDataPoint(){if(this.d){return`${a(this.d.timestamp).format(u.a.tooltipTimeFormat)}: ${(Math.round(100*this.d.price)/100).toLocaleString()}€`}return"no data"}touchMove(t,e,i){s.event.preventDefault(),s.event.stopPropagation();s.touches(i[e]);this.focus.style("display",null),this.mousemove(t,e,i)}touchStart(t,e,i){s.event.preventDefault(),s.event.stopPropagation();s.touches(i[e]);this.focus.style("display",null),this.mousemove(t,e,i)}mouseover(t,e,i){s.event.preventDefault(),s.event.stopPropagation(),this.focus.style("display",null),this.mousemove(t,e,i)}mousemove(t,e,i){let a;a=this.newxScale?this.newxScale.invert(s.mouse(i[e])[0]):this.chartProps.xScale.invert(s.mouse(i[e])[0]);const r=this.bisectDate(this.linea1.timePriceArray,a,1),h=this.linea1.timePriceArray[r-1],n=this.linea1.timePriceArray.length;let o;o=r>=this.linea1.timePriceArray.length?this.linea1.timePriceArray[n-1]:this.linea1.timePriceArray[r],this.d=a.getTime()-h.timestamp.getTime()>o.timestamp.getTime()-a.getTime()?o:h,this.moveToolTip()}moveToolTip(){let t;this.newxScale?(this.focus.attr("transform",`translate(${this.newxScale(new Date(this.d.timestamp))},${this.newyScale(this.d.price)})`),t=this.newxScale(new Date(this.d.timestamp))):(this.focus.attr("transform",`translate(${this.chartProps.xScale(new Date(this.d.timestamp))},${this.chartProps.yScale(this.d.price)})`),t=this.chartProps.xScale(new Date(this.d.timestamp))),this.textToolTip.text(this.getDataPoint.bind(this));const e=this.textToolTip.node();let i;(i=e.getBBox()).width+10>t?(this.textToolTip.attr("text-anchor","start"),i=e.getBBox()):this.textToolTip.attr("text-anchor","end"),this.focus.selectAll("rect").remove();this.focus.append("rect").attr("x",i.x).attr("y",i.y).attr("width",i.width).attr("height",i.height).style("fill","white").style("fill-opacity",".9").style("stroke","#666").style("stroke-width","0.5px");this.focus.node().insertBefore(e,null);let s=0;s=this.newyScale?this.newyScale(this.d.price):this.chartProps.yScale(this.d.price),this.focus.select(".x-hover-line").attr("y2",this.height-s),this.focus.select(".y-hover-line").attr("x2",-t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,