(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{88:function(t,e,i){"use strict";i.r(e);var s=i(52),a=i(53),h=i(55),r=i(79),n=i(81),o=i(80),c=i(84),l=i(87),m=i(85),p=i(86);var d={date:"%d.%m.%Y",dateTime:"%a %b %e %X %Y",days:["Domingo","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"],months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],periods:["AM","PM"],shortDays:["Do","Lu","Ma","Mi","Ju","Vi","Sa"],shortMonths:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic"],time:"%H:%M:%S"};i.d(e,"GraphLineComponent",function(){return g}),s.timeFormatDefaultLocale(d);class g{constructor(t){this.lineas=t,this.bisectDate=s.bisector(t=>t.timestamp).right,this.bisectValue=s.bisector(t=>t.price).right,this.svgWidth=800,this.svgHeight=300,this.margin={top:30,right:40,bottom:50,left:60},this.width=this.svgWidth-this.margin.left-this.margin.right,this.height=this.svgHeight-this.margin.top-this.margin.bottom,this.originalCircle={cx:-150,cy:-15,r:20},this.chartProps={},this.lineGraphElement=document.getElementById("linechart"),this.titleGraph="",this.ngOnInit()}getLine1(){return new h.a(t=>{this.linea1=this.lineas[0],t.next(this.lineas[0])})}getTitles(){return new h.a(t=>{let e="";this.lineas.forEach(t=>{t.name&&(e=""===e?t.name:e+" / "+t.name)}),this.titleGraph=e,t.next(e)})}ngOnInit(){this.getTitles().pipe(Object(o.a)(t=>this.getLine1()),Object(c.a)(t=>this.defineChart$()),Object(c.a)(t=>Object(r.a)(this.lineas)),Object(o.a)(t=>this.drawLine$(t)),Object(l.a)(1e3),Object(m.a)(t=>this.addToolTips$(t)),Object(m.a)(t=>this.addEventsArea()),Object(p.a)(()=>Object(n.a)("error"))).subscribe(t=>{this.addTitleGraph()})}deleteSvg(){s.select(this.lineGraphElement).remove()}defineChart$(){return new h.a(t=>{this.defineChart(),t.next(!0)})}defineChart(){this.svgViewport=s.select(this.lineGraphElement).append("svg").style("background","white").attr("viewBox",`0 0 ${this.svgWidth} ${this.svgHeight}`),this.chartProps.xScale=s.scaleTime().domain(s.extent(this.linea1.timePriceArray,t=>new Date(t.timestamp).getTime())).range([0,this.width]).clamp(!0),this.svgViewport.on("mousedown.zoom",null).on("touchstart.zoom",null).on("touchmove.zoom",null).on("touchend.zoom",null),this.chartProps.yScale=s.scaleLinear().domain([0,s.max(this.lineas,t=>1.1*Math.max(...t.timePriceArray.map(t=>t.price)))]).range([this.height,0]).clamp(!0),this.xAxis=s.axisBottom(this.chartProps.xScale),this.yAxis=s.axisLeft(this.chartProps.yScale),this.zoom=s.zoom().scaleExtent([1,1/0]).translateExtent([[0,0],[this.width,this.height]]).extent([[0,0],[this.width,this.height]]).on("zoom",this.zoomFunction.bind(this)),this.innerSpace=this.svgViewport.append("g").attr("class","inner_space").attr("transform","translate("+this.margin.left+","+this.margin.top+")").call(this.zoom.bind(this));const t=s.timeFormat("%d/%m %H:%M");this.gX=this.innerSpace.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+this.height+")").call(this.xAxis.ticks(6).tickFormat(t)),this.gY=this.innerSpace.append("g").attr("class","axis axis--y").call(this.yAxis),this.originalLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.chartProps.xScale(t.timestamp.getTime())}).y(t=>this.chartProps.yScale(t.price)),this.scaledLine=s.line().x(t=>{if(t.timestamp instanceof Date)return this.newxScale(t.timestamp.getTime())}).y(t=>this.newyScale(t.price))}addEventsArea(){return new h.a(t=>{this.view=this.innerSpace.append("rect").attr("class","zoom").attr("width",this.width).attr("height",this.height).on("mouseover",()=>{this.focus.style("display",null)}).on("mouseout",()=>{this.focus.style("display","none")}).on("mousemove",this.mousemove.bind(this)).on("touchstart",this.touchStart.bind(this)).on("touchmove",this.touchStart.bind(this)).on("touchend",()=>{this.focus.style("display",null)}),t.next(!0)})}drawLine$(t){return new h.a(e=>{this.drawLine(t),e.next(t)})}drawLine(t){t.timePriceArray.forEach(t=>{t.timestamp=a(t.timestamp).toDate()}),this.lineSvg=this.innerSpace.append("path").datum(t.timePriceArray).attr("class","linegraph").style("stroke","black").attr("d",this.originalLine.bind(this)(t.timePriceArray))}zoomFunction(){this.newxScale=s.event.transform.rescaleX(this.chartProps.xScale),this.newyScale=s.event.transform.rescaleY(this.chartProps.yScale),this.gX.call(this.xAxis.scale(this.newxScale)),this.gY.call(this.yAxis.scale(this.newyScale)),this.lineSvg.call(this.xAxis.scale(this.newxScale)),this.lineSvg.call(this.yAxis.scale(this.newyScale)),this.d3eventtransform=s.event.transform,this.changeLine(),this.moveToolTip()}changeLine(){this.lineSvg.attr("d",this.scaledLine.bind(this))}addTitleGraph(){this.titleSvg=this.innerSpace.append("text").attr("x",this.margin.left).attr("y",260).attr("class","graphic_title_text").attr("text-anchor","left").text(this.titleGraph)}addToolTips$(t){return new h.a(e=>{this.addToolTips(t),e.next(!0)})}addToolTips(t){this.focus=this.innerSpace.append("g").attr("class","this.focus").style("display","none"),this.focus.append("line").attr("class","x-hover-line hover-line").attr("y1",0).attr("y2",this.height).attr("pointer-events","none"),this.focus.append("line").attr("class","y-hover-line hover-line").attr("x1",this.width).attr("x2",this.width).attr("pointer-events","none"),this.focus.append("circle").attr("r",2).attr("pointer-events","none"),this.focus.append("text").attr("x",15).attr("dy",".31em")}touchStart(t,e,i){this.focus.style("display",null),this.mousemove(t,e,i)}mousemove(t,e,i){let a;a=this.newxScale?this.newxScale.invert(s.mouse(i[e])[0]):this.chartProps.xScale.invert(s.mouse(i[e])[0]);const h=this.bisectDate(this.linea1.timePriceArray,a,1),r=this.linea1.timePriceArray[h-1],n=this.linea1.timePriceArray[h];this.d=a.getTime()-r.timestamp.getTime()>n.timestamp.getTime()-a.getTime()?n:r,this.moveToolTip()}moveToolTip(){this.newxScale?this.focus.attr("transform",`translate(${this.newxScale(new Date(this.d.timestamp))},${this.newyScale(this.d.price)})`):this.focus.attr("transform",`translate(${this.chartProps.xScale(new Date(this.d.timestamp))},${this.chartProps.yScale(this.d.price)})`);const t=this.focus.select("text").text(()=>`${a(this.d.timestamp).format("DD/MM HH:mm")}h: ${Math.round(10*this.d.price)/10}`).node().getBBox();this.focus.selectAll("rect").remove();this.focus.append("rect").attr("x",t.x).attr("y",t.y).attr("width",t.width).attr("height",t.height).style("fill","white").style("fill-opacity",".3").style("stroke","#666").style("stroke-width","1.5px");let e=0;e=this.newyScale?this.newyScale(this.d.price):this.chartProps.yScale(this.d.price),this.focus.select(".x-hover-line").attr("y2",this.height-e),this.focus.select(".y-hover-line").attr("x2",this.width+this.width)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,